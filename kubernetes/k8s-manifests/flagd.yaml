# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: flagd
  labels:
    opentelemetry.io/name: flagd
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: flagd
    app.kubernetes.io/name: flagd
    app.kubernetes.io/version: "2.0.2"
    app.kubernetes.io/part-of: opentelemetry-demo
spec:
  type: ClusterIP
  ports:
    - port: 8013
      name: rpc
      targetPort: 8013
    - port: 8016
      name: ofrep
      targetPort: 8016
    - port: 4000
      name: tcp-service-0
      targetPort: 4000
  selector:
    opentelemetry.io/name: flagd
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flagd
  labels:
    opentelemetry.io/name: flagd
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: flagd
    app.kubernetes.io/name: flagd
    app.kubernetes.io/version: "2.0.2"
    app.kubernetes.io/part-of: opentelemetry-demo
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: flagd
  template:
    metadata:
      labels:
        opentelemetry.io/name: flagd
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: flagd
        app.kubernetes.io/name: flagd
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: flagd
          image: 'ghcr.io/open-feature/flagd:v0.11.1'
          imagePullPolicy: IfNotPresent
          command:
            - /flagd-build
            - start
            - --port
            - "8013"
            - --ofrep-port
            - "8016"
            - --uri
            - file:./etc/flagd/demo.flagd.json
          ports:
            - containerPort: 8013
              name: rpc
            - containerPort: 8016
              name: ofrep
          env:
            # - name: OTEL_SERVICE_NAME
            #   valueFrom:
            #     fieldRef:
            #       apiVersion: v1
            #       fieldPath: metadata.labels['app.kubernetes.io/component']
            # - name: NODE_IP
            #   valueFrom:
            #     fieldRef:
            #       fieldPath: status.hostIP
            # - name: OTEL_COLLECTOR_NAME
            #   value: $(NODE_IP)
            # - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            #   value: cumulative
            # - name: FLAGD_METRICS_EXPORTER
            #   value: otel
            # - name: FLAGD_OTEL_COLLECTOR_URI
            #   value: $(OTEL_COLLECTOR_NAME):4317
            # - name: OTEL_RESOURCE_ATTRIBUTES
            #   value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
          resources:
            limits:
              memory: 75Mi
          volumeMounts:
            - name: config-rw
              mountPath: /etc/flagd
        - name: flagd-ui
          image: 'ghcr.io/open-telemetry/demo:2.0.2-flagd-ui'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 4000
              name: service
          env:
          #   - name: OTEL_SERVICE_NAME
          #     valueFrom:
          #       fieldRef:
          #         apiVersion: v1
          #         fieldPath: metadata.labels['app.kubernetes.io/component']
          #   - name: NODE_IP
          #     valueFrom:
          #       fieldRef:
          #         fieldPath: status.hostIP
          #   - name: OTEL_COLLECTOR_NAME
          #     value: $(NODE_IP)
          #   - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          #     value: cumulative
          #   - name: FLAGD_METRICS_EXPORTER
          #     value: otel
          #   - name: OTEL_EXPORTER_OTLP_ENDPOINT
          #     value: http://$(OTEL_COLLECTOR_NAME):4318
          #   - name: OTEL_RESOURCE_ATTRIBUTES
          #     value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
          resources:
            limits:
              memory: 100Mi
          volumeMounts:
            - mountPath: /app/data
              name: config-rw
      initContainers:
        - command:
            - sh
            - -c
            - cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json && cat /config-rw/demo.flagd.json
          image: busybox
          name: init-config
          volumeMounts:
            - mountPath: /config-ro
              name: config-ro
            - mountPath: /config-rw
              name: config-rw
      volumes:
        - name: config-rw
          emptyDir: {}
        - configMap:
            name: flagd-config
          name: config-ro
