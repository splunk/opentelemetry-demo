# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: ad
  labels:
    opentelemetry.io/name: ad
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: ad
    app.kubernetes.io/name: ad
    app.kubernetes.io/version: "2.0.2"
    app.kubernetes.io/part-of: opentelemetry-demo
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    opentelemetry.io/name: ad
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ad
  labels:
    opentelemetry.io/name: ad
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: ad
    app.kubernetes.io/name: ad
    app.kubernetes.io/version: "2.0.2"
    app.kubernetes.io/part-of: opentelemetry-demo
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: ad
  template:
    metadata:
      labels:
        opentelemetry.io/name: ad
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: ad
        app.kubernetes.io/name: ad
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: ad
          #image: 'ghcr.io/open-telemetry/demo:2.0.2-ad'
          image: ghcr.io/splunk/opentelemetry-demo/otel-ad:0.0.1
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: OTEL_COLLECTOR_NAME
              value: $(NODE_IP)
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: cumulative
            - name: AD_PORT
              value: "8080"
            - name: FLAGD_HOST
              value: flagd
            - name: FLAGD_PORT
              value: "8013"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4318
            - name: OTEL_LOGS_EXPORTER
              value: otlp
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
            - name: SPLUNK_PROFILER_ENABLED
              value: "true"
            - name: SPLUNK_PROFILER_MEMORY_ENABLED
              value: "true"
            - name: SPLUNK_METRICS_ENABLED
              value: "true"
            - name: SPLUNK_METRICS_ENDPOINT
              value: "http://$(NODE_IP):9943"
            - name: OTEL_TRACE_EXPORTER
              value: otlp
            - name: OTEL_TRACES_SAMPLER
              value: "rules"
            #- name: OTEL_TRACES_SAMPLER_ARG
            #  value: "drop=/grpc.health.v1.Health;fallback=parentbased_always_on"    
            - name: SPLUNK_PROFILER_CALL_STACK_INTERVAL
              value: "500"
            - name: JAVA_TOOL_OPTIONS
              #  value: "-javaagent:/usr/src/app/splunk-otel-javaagent.jar -Dsplunk.profiler.include.internal.stacks=false -Dsplunk.profiler.cpu.data.format=pprof-gzip-base64 -Xmx640m"
              value: "-javaagent:/usr/src/app/splunk-otel-javaagent.jar"
          resources:
            limits:
              memory: 400Mi
          volumeMounts:
      volumes:
