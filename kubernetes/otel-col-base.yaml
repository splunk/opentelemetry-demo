clusterReceiver:
  eventsEnabled: true
  k8sObjects:
    - name: events
      mode: watch
      namespaces: [default, splunk]
    - name: pods
      mode: watch
      namespaces: [default, splunk]
agent:
  extraEnvs:
  - name: WORKSHOP_ENVIRONMENT
    valueFrom:
      secretKeyRef:
        name: workshop-secret
        key: instance
  config:
    receivers:
      smartagent/http:
        type: http
        host: dev-astronomy.splunko11y.com
        useHTTPS: true
      receiver_creator:
        receivers:
          mysql/online-boutique:
            rule: type == "port" && pod.name matches "mysql" && port == 3306
            config:
              tls:
                insecure: true
              username: root
              password: root
              database: LxvGChW075
          redis:
           rule: type == "port" && pod.name matches "redis-cart" && port == 6379
           config:
             endpoint: "redis-cart:6379"
             collection_interval: 10s
      sqlserver:
        collection_interval: 10s
        username: sa
        password: "ChangeMe_SuperStrong123!"
        server: sql-express.sql.svc.cluster.local
        port: 1433
        resource_attributes:
          sqlserver.computer.name:
            enabled: true
          sqlserver.instance.name:
            enabled: true
        # ADD to ENABLE Database Monitoring
        events:
          db.server.query_sample:
            enabled: true
          db.server.top_query:
            enabled: true

    processors:
      filter/drop_flagd:
        traces:
          span:
          - attributes["rpc.method"] == "EventStream"
          - attributes["rpc.method"] == "ResolveAll"
          - attributes["rpc.method"] == "ResolveBoolean"
          - attributes["rpc.method"] == "ResolveFloat"
          - attributes["rpc.method"] == "ResolveInt"
          - attributes["http.url"] == "http://flagd:8016/ofrep/v1/evaluate/flags/loadGeneratorFloodHomepage"
          - attributes["url.full"] == "http://flagd:8013/flagd.evaluation.v1.Service/ResolveBoolean"
          - attributes["otel.scope.name"] == "flagd.evaluation.v1"
          - attributes["url.full"] == "http://flagd:8013/flagd.evaluation.v1.Service/EventStream"
    
    # Exporters define where the telemetry data is sent to
    exporters:
      # Exports dbmon events as logs
      otlphttp/dbmon:
        headers:
          X-SF-Token: 3QThm3q899dAU8udj-i4tA
          X-splunk-instrumentation-library: dbmon
        logs_endpoint: https://ingest.us1.signalfx.com/v3/event
        sending_queue:
          batch:
            flush_timeout: 15s
            max_size: 10485760 # 10 MiB
            sizer: bytes

    service:
      pipelines:
        metrics:
          exporters: [signalfx]
          processors: [memory_limiter, k8sattributes, batch, resourcedetection, resource]
          receivers: [hostmetrics, kubeletstats, otlp, sqlserver, receiver_creator, signalfx]
        traces:
          exporters: [signalfx, otlphttp]
          processors: [memory_limiter,  filter/drop_flagd, k8sattributes, batch, resourcedetection, resource, resource/add_environment]
          receivers: [otlp, jaeger, zipkin]
        logs/dbmon:
          receivers:
            - sqlserver
          processors:
            - memory_limiter
            #- resource/tns
            - batch
            - resourcedetection
          exporters:
            - otlphttp/dbmon 
logsCollection:
  extraFileLogs:
    filelog/syslog:
      include: [/var/log/syslog]
      include_file_path: true
      include_file_name: false
      resource:
        com.splunk.source: /var/log/syslog
        host.name: 'EXPR(env("K8S_NODE_NAME"))'
        com.splunk.sourcetype: syslog
    filelog/auth_log:
      include: [/var/log/auth.log]
      include_file_path: true
      include_file_name: false
      resource:
        com.splunk.source: /var/log/auth.log
        host.name: 'EXPR(env("K8S_NODE_NAME"))'
        com.splunk.sourcetype: auth_log
