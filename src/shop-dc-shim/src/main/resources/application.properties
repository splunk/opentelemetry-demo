# Application configuration
spring.application.name=shop-dc-shim
server.port=${SHOP_DC_SHIM_PORT:8070}
spring.main.lazy-initialization=true
spring.jpa.defer-datasource-initialization=true
spring.datasource.hikari.initialization-fail-timeout=-1

# Database configuration (SQL Server)
spring.datasource.url=${DB_CONNECTION_STRING:jdbc:sqlserver://shop-dc-shim-db:1433;databaseName=dc-shop-shim;encrypt=false;trustServerCertificate=true}
spring.datasource.username=${DB_USERNAME:sa}
spring.datasource.password=${DB_PASSWORD:ShopPass123!}
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

# JPA/Hibernate configuration
spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true

# Connection pool settings for enterprise usage
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.initialization-fail-timeout=1
spring.datasource.hikari.leak-detection-threshold=60000

# Cloud checkout service configuration
app.cloud.checkout.host=${CHECKOUT_SERVICE_HOST:checkout}
app.cloud.checkout.port=${CHECKOUT_SERVICE_PORT:8080}
app.cloud.checkout.addr=${CHECKOUT_SERVICE_ADDR:checkout:8080}

# Actuator configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true

# Jackson configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC

# OpenTelemetry configuration
otel.service.name=${OTEL_SERVICE_NAME:shop-dc-shim}
otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://splunk-otel-collector-agent:4318}
otel.resource.attributes=${OTEL_RESOURCE_ATTRIBUTES:service.name=shop-dc-shim,deployment.environment.name=datacenter-b01,service.namespace=datacenter,service.version=2.1.3}

# Logging configuration
logging.level.com.opentelemetry.demo.shopdcshim=INFO
logging.level.io.grpc=INFO
logging.level.org.springframework.web=DEBUG

# Async processing configuration
spring.task.execution.pool.core-size=10
spring.task.execution.pool.max-size=30
spring.task.execution.pool.queue-capacity=200

# gRPC client configuration
grpc.client.checkout.address=${CHECKOUT_SERVICE_HOST:checkout}:${CHECKOUT_SERVICE_PORT:8080}
grpc.client.checkout.negotiation-type=plaintext
grpc.client.checkout.keep-alive-time=30s
grpc.client.checkout.keep-alive-timeout=5s
grpc.client.checkout.keep-alive-without-calls=true
